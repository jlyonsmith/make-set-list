{"version":3,"sources":["../src/MakeSetListTool.js"],"names":["pipeToPromise","readable","writeable","promise","Promise","resolve","reject","on","error","file","pipe","MakeSetListTool","autobind","constructor","container","toolName","log","debug","run","argv","options","boolean","string","alias","args","version","info","fullVersion","help","songListPath","_","Error","pdfRootPath","songList","fs","readFile","encoding","songMap","Map","title","split","set","entries","readdirp","fileFilter","Array","from","keys","outputPath","entry","files","get","basename","push","fullPath","name","slice","length","warning","map","join","command","values","filter","e","result","stderr","trim"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport autobind from \"autobind-decorator\"\nimport * as version from \"./version\"\nimport fs from \"fs-extra\"\nimport readdirp from \"readdirp\"\nimport { exec } from \"promisify-child-process\"\n\nconst pipeToPromise = (readable, writeable) => {\n  const promise = new Promise((resolve, reject) => {\n    readable.on(\"error\", (error) => {\n      reject(error)\n    })\n    writeable.on(\"error\", (error) => {\n      reject(error)\n    })\n    writeable.on(\"finish\", (file) => {\n      resolve(file)\n    })\n  })\n  readable.pipe(writeable)\n  return promise\n}\n\n@autobind\nexport class MakeSetListTool {\n  constructor(container) {\n    this.toolName = container.toolName\n    this.log = container.log\n    this.debug = !!container.debug\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"debug\", \"help\", \"version\"],\n      string: [],\n      alias: {},\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = !!args.debug\n\n    if (args.version) {\n      this.log.info(version.fullVersion)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nUsage: ${this.toolName} [options] <song-list-file> <pdf-root-dir>\n\nDescription:\n\nCreates a set list from a collection of PDF files store in sub-directories.\n\nOptions:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n      return 0\n    }\n\n    const songListPath = args._[0]\n\n    if (!songListPath) {\n      throw new Error(\"A song list file must be given\")\n    }\n\n    let pdfRootPath = args._[1]\n\n    if (!pdfRootPath) {\n      throw new Error(\"A PDF root directory must be given\")\n    }\n\n    const songList = await fs.readFile(songListPath, { encoding: \"utf8\" })\n    const songMap = new Map()\n\n    for (const title of songList.split(\"\\n\")) {\n      songMap.set(title + \".pdf\", [])\n    }\n\n    const entries = await readdirp.promise(pdfRootPath, {\n      fileFilter: Array.from(songMap.keys()),\n    })\n    const outputPath = \"song-list.pdf\"\n\n    for (const entry of entries) {\n      const files = songMap.get(entry.basename)\n\n      if (files) {\n        files.push(entry.fullPath)\n      }\n    }\n\n    for (const [name, files] of songMap.entries()) {\n      const title = name.slice(0, -4)\n\n      if (files.length === 0) {\n        this.log.warning(`Song '${title}' was not found`)\n      } else if (files.length > 1) {\n        this.log.warning(\n          `Song '${title}' has ${files.length} copies: ${files\n            .map((file) => '\"' + file + '\"')\n            .join(\", \")}`\n        )\n      }\n    }\n    const command = `pdf-o-rama concat -o ${outputPath} ${Array.from(\n      songMap.values()\n    )\n      .filter((files) => `\"${files[0]}\"`)\n      .join(\" \")}`\n\n    if (this.debug) {\n      this.log.info(command)\n    }\n\n    this.log.info(`Combining ${outputPath} PDF's...`)\n\n    try {\n      await exec(command)\n    } catch (e) {\n      throw new Error(`Unable to create PDF. ${result.stderr.trim()}`)\n    }\n\n    this.log.info(\"Done\")\n\n    return 0\n  }\n}\n"],"file":"MakeSetListTool.js"}